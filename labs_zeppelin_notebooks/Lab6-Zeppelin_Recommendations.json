{"paragraphs":[{"text":"import org.apache.spark.mllib.recommendation.Rating\nimport org.apache.spark.mllib.recommendation.ALS","authenticationInfo":{},"dateUpdated":"May 9, 2016 9:30:38 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","tableHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462628765544_-398458746","id":"20160507-144605_387782661","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.mllib.recommendation.Rating\nimport org.apache.spark.mllib.recommendation.ALS\n"},"dateCreated":"May 7, 2016 2:46:05 PM","dateStarted":"May 9, 2016 9:30:38 AM","dateFinished":"May 9, 2016 9:30:52 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:713"},{"text":"// prepare data\nval csvLines = sc.textFile(\"/mapr/training.mapr.com/data/joke_recommendations/jester/jester-data-1.csv\")\nval ratings = csvLines.map(line => line.substring(line.indexOf(\",\")+1))\n    .flatMap(_.split(\",\"))\n    .zipWithIndex()\n    .map{case(score, id) => (id/100, id%100, score.toFloat)} // userid, jokeid, score\n    .filter(_._3 <= 10) // remove empty scores\n    .filter(_._1 < 5000)\n    .map{case(user, joke, score) => Rating(user.toInt, joke.toInt, score)}\n    .cache\n\nratings.take(10).foreach(println)  ","authenticationInfo":{},"dateUpdated":"May 9, 2016 9:30:53 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462628765545_-398843494","id":"20160507-144605_357827323","result":{"code":"SUCCESS","type":"TEXT","msg":"csvLines: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[1] at textFile at <console>:26\nratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[8] at map at <console>:33\nRating(0,0,-7.820000171661377)\nRating(0,1,8.789999961853027)\nRating(0,2,-9.65999984741211)\nRating(0,3,-8.15999984741211)\nRating(0,4,-7.519999980926514)\nRating(0,5,-8.5)\nRating(0,6,-9.850000381469727)\nRating(0,7,4.170000076293945)\nRating(0,8,-8.979999542236328)\nRating(0,9,-4.760000228881836)\n"},"dateCreated":"May 7, 2016 2:46:05 PM","dateStarted":"May 9, 2016 9:30:53 AM","dateFinished":"May 9, 2016 9:30:55 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:714"},{"text":"// train model\nval rank = 7\nval iterations = 10\nval lambda = 0.01\nval model = ALS.train(ratings, rank, iterations, lambda)","authenticationInfo":{},"dateUpdated":"May 9, 2016 9:30:59 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462628765546_-397689248","id":"20160507-144605_1135477311","result":{"code":"SUCCESS","type":"TEXT","msg":"rank: Int = 7\niterations: Int = 10\nlambda: Double = 0.01\nmodel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@69060a77\n"},"dateCreated":"May 7, 2016 2:46:05 PM","dateStarted":"May 9, 2016 9:30:59 AM","dateFinished":"May 9, 2016 9:31:04 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:715"},{"text":"// Evaluate the model on rating data\nval usersProducts = ratings.map { case Rating(user, product, rate) => (user, product)}\nval predictions = model.predict(usersProducts).map { case Rating(user, product, rate) => ((user, product), rate) }\nval ratesAndPreds = ratings.map { case Rating(user, product, rate) => ((user, product), rate) }.join(predictions)\nval MSE = ratesAndPreds.map { case ((user, product), (r1, r2)) =>\n    val err = (r1 - r2)\n    err * err\n}.mean()\n\nprintln(\"Mean Squared Error = \" + MSE)","authenticationInfo":{},"dateUpdated":"May 9, 2016 9:31:20 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462628765546_-397689248","id":"20160507-144605_1370422348","result":{"code":"SUCCESS","type":"TEXT","msg":"usersProducts: org.apache.spark.rdd.RDD[(Int, Int)] = MapPartitionsRDD[216] at map at <console>:30\npredictions: org.apache.spark.rdd.RDD[((Int, Int), Double)] = MapPartitionsRDD[226] at map at <console>:39\nratesAndPreds: org.apache.spark.rdd.RDD[((Int, Int), (Double, Double))] = MapPartitionsRDD[230] at join at <console>:41\nMSE: Double = 13.548324407458859\nMean Squared Error = 13.548324407458859\n"},"dateCreated":"May 7, 2016 2:46:05 PM","dateStarted":"May 9, 2016 9:31:20 AM","dateFinished":"May 9, 2016 9:31:21 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:716"},{"text":"// load jokes so we can actually show them as a recommendation\nval jokesMap = sc.wholeTextFiles(\"/mapr/training.mapr.com/data/joke_recommendations/jester/jokes\")\n    .map{case(file, joke) => (file.substring(file.lastIndexOf('/')+1, file.lastIndexOf('.')).toInt, joke)}\n    .collect.toMap\n    \nval jokesBC = sc.broadcast(jokesMap)","authenticationInfo":{},"dateUpdated":"May 9, 2016 9:32:01 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462628765547_-398073997","id":"20160507-144605_1266300747","result":{"code":"SUCCESS","type":"TEXT","msg":"jokesMap: scala.collection.immutable.Map[Int,String] = \nMap(69 -> \"   This guys wife asks, \"Honey if I died would you remarry?\" and he\n       replies, \"Well, after a considerable period of grieving, we all\n       need companionship, I guess I would.\"\n       She then asks, \"If I died and you remarried, would she live in this\n       house?\" and he replies, \"We've spent a lot of time and money\n       getting this house just the way we want it. I'm not going to get\n       rid of my house, I guess she would.\"\n       \"If I died and you remarried, and she lived in this house, would\n       she sleep in our bed?\" and he says, \"That bed is brand new, we just\n       paid two thousand dollars for it, it's going to last a long time, I\n       guess she would.\"\n       So she asks, \"If I died and you r...jokesBC: org.apache.spark.broadcast.Broadcast[scala.collection.immutable.Map[Int,String]] = Broadcast(42)\n"},"dateCreated":"May 7, 2016 2:46:05 PM","dateStarted":"May 9, 2016 9:32:01 AM","dateFinished":"May 9, 2016 9:32:03 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:717"},{"text":"// get the top 5 recommendations for asingle userID (0..5000)\nval userId = 3000\nmodel.recommendProducts(userId, 5)\n    .foreach { recommendation => println(\"Score \"+recommendation.rating +\" for joke number \"+recommendation.product+\n    \"\\n\"+jokesBC.value(recommendation.product))}","authenticationInfo":{},"dateUpdated":"May 9, 2016 9:32:05 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462628765547_-398073997","id":"20160507-144605_2114762501","result":{"code":"SUCCESS","type":"TEXT","msg":"userId: Int = 3000\nScore 5.244180896757063 for joke number 30\n   Q: What's the difference between a Lawyer and a Plumber?\n       A: A Plumber works to unclog the system.\n\n\nScore 4.983797508746978 for joke number 26\n   A guy walks into a bar and sits down next to an extremely gorgeous\n       woman. The first thing he notices about her though, are her pants.\n       They were skin-tight, high-waisted and had no obvious mechanism\n       (zipper, buttons or velcro) for opening them.\n       After several minutes of puzzling over how she got the pants up\n       over her hips, he finally worked up the nerve to ask her. \"Excuse\n       me miss, but how do you get into your pants?\"\n       \"Well,\" she replied, \"you can start by buying me a drink.\"\n\nScore 4.816494079214797 for joke number 64\n   What is the rallying cry of the International Dyslexic Pride movement?\n       Dyslexics Untie!\n\n\nScore 4.719000336931378 for joke number 10\n   Two cannibals are eating a clown, one turns to other and says:\n       \"Does this taste funny to you?\n\n\nScore 4.432384565020272 for joke number 20\n   What's the difference between a MacIntosh and an Etch-A-Sketch?\n       You don't have to shake the Mac to clear the screen.\n\n\n"},"dateCreated":"May 7, 2016 2:46:05 PM","dateStarted":"May 9, 2016 9:32:05 AM","dateFinished":"May 9, 2016 9:32:06 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:718"},{"text":"// or get the users who most likely will like joke nr X (1..100)\nval jokeId = 1\nprintln(jokesBC.value(jokeId))\nmodel.recommendUsers(jokeId, 5)\n      .foreach { rating => println(\"User \"+rating.user +\" ( score: \"+rating.rating+\")\")}","authenticationInfo":{},"dateUpdated":"May 9, 2016 9:32:08 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462628765547_-398073997","id":"20160507-144605_1300294913","result":{"code":"SUCCESS","type":"TEXT","msg":"jokeId: Int = 1\n   A man visits the doctor. The doctor says \"I have bad news for you.You\n   have cancer and Alzheimer's disease\".\n\n   The man replies \"Well,thank God I don't have cancer!\"\n\nUser 1440 ( score: 13.776705360614404)\nUser 946 ( score: 11.847373257294155)\nUser 3653 ( score: 11.546220110950891)\nUser 205 ( score: 11.324093304519577)\nUser 1556 ( score: 11.278687226622065)\n"},"dateCreated":"May 7, 2016 2:46:05 PM","dateStarted":"May 9, 2016 9:32:08 AM","dateFinished":"May 9, 2016 9:32:08 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:719"},{"text":"","authenticationInfo":{},"dateUpdated":"May 9, 2016 9:32:10 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1462628765548_-399997741","id":"20160507-144605_1802118241","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"May 7, 2016 2:46:05 PM","dateStarted":"May 9, 2016 9:32:10 AM","dateFinished":"May 9, 2016 9:32:10 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:720"}],"name":"Lab6 - Recommendations","id":"2BJG8P1EV","angularObjects":{"2BGRRSV66":[],"2BJ2VWKJZ":[],"2BFM4ET3V":[],"2BFQ9NYBH":[],"2BH65YMH4":[],"2BFUX85C9":[],"2BHRRR9VJ":[],"2BK1CVPS1":[],"2BJKHN9KF":[],"2BG4RAZ3U":[],"2BHHWQV58":[],"2BGY19DBS":[],"2BJH5FGAQ":[],"2BH7QS7U7":[],"2BHCTUXCJ":[],"2BHK7YRH1":[],"2BG1YRXN9":[]},"config":{"looknfeel":"default"},"info":{}}