{"paragraphs":[{"text":"import org.apache.spark.mllib.recommendation.Rating\nimport org.apache.spark.mllib.recommendation.ALS","user":"anonymous","dateUpdated":"2017-02-08T09:29:06+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"tableHide":true,"results":[{"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486542211616_-558376429","id":"20160507-144605_387782661","dateCreated":"2017-02-08T09:23:31+0100","dateStarted":"2017-02-08T09:29:06+0100","dateFinished":"2017-02-08T09:29:07+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6738"},{"text":"// prepare data\nval csvLines = sc.textFile(\"/mapr/training.mapr.com/data/lab6_dataset/joke_recommendations/jester/jester-data-1.csv\")\nval ratings = csvLines.map(line => line.substring(line.indexOf(\",\")+1))\n    .flatMap(_.split(\",\"))\n    .zipWithIndex()\n    .map{case(score, id) => (id/100, id%100, score.toFloat)} // userid, jokeid, score\n    .filter(_._3 <= 10) // remove empty scores\n    .filter(_._1 < 5000)\n    .map{case(user, joke, score) => Rating(user.toInt, joke.toInt, score)}\n    .cache\n\nratings.take(10).foreach(println)  ","user":"anonymous","dateUpdated":"2017-02-08T09:29:06+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486542211618_-557606931","id":"20160507-144605_357827323","dateCreated":"2017-02-08T09:23:31+0100","dateStarted":"2017-02-08T09:29:06+0100","dateFinished":"2017-02-08T09:29:11+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6739"},{"text":"// train model\nval rank = 7\nval iterations = 10\nval lambda = 0.01\nval model = ALS.train(ratings, rank, iterations, lambda)","user":"anonymous","dateUpdated":"2017-02-08T09:29:06+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486542211618_-557606931","id":"20160507-144605_1135477311","dateCreated":"2017-02-08T09:23:31+0100","dateStarted":"2017-02-08T09:29:07+0100","dateFinished":"2017-02-08T09:29:23+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6740"},{"text":"// Evaluate the model on rating data\nval usersProducts = ratings.map { case Rating(user, product, rate) => (user, product)}\nval predictions = model.predict(usersProducts).map { case Rating(user, product, rate) => ((user, product), rate) }\nval ratesAndPreds = ratings.map { case Rating(user, product, rate) => ((user, product), rate) }.join(predictions)\nval MSE = ratesAndPreds.map { case ((user, product), (r1, r2)) =>\n    val err = (r1 - r2)\n    err * err\n}.mean()\n\nprintln(\"Mean Squared Error = \" + MSE)","user":"anonymous","dateUpdated":"2017-02-08T09:29:06+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486542211619_-557991680","id":"20160507-144605_1370422348","dateCreated":"2017-02-08T09:23:31+0100","dateStarted":"2017-02-08T09:29:12+0100","dateFinished":"2017-02-08T09:29:47+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6741"},{"text":"// load jokes so we can actually show them as a recommendation\nval jokesMap = sc.wholeTextFiles(\"/mapr/training.mapr.com/data/lab6_dataset/joke_recommendations/jester/jokes\")\n    .map{case(file, joke) => (file.substring(file.lastIndexOf('/')+1, file.lastIndexOf('.')).toInt, joke)}\n    .collect.toMap\n    \nval jokesBC = sc.broadcast(jokesMap)","user":"anonymous","dateUpdated":"2017-02-08T09:29:06+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486542211619_-557991680","id":"20160507-144605_1266300747","dateCreated":"2017-02-08T09:23:31+0100","dateStarted":"2017-02-08T09:29:23+0100","dateFinished":"2017-02-08T09:29:57+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6742"},{"text":"// get the top 5 recommendations for asingle userID (0..5000)\nval userId = 3000\nmodel.recommendProducts(userId, 5)\n    .foreach { recommendation => println(\"Score \"+recommendation.rating +\" for joke number \"+recommendation.product+\n    \"\\n\"+jokesBC.value(recommendation.product))}","user":"anonymous","dateUpdated":"2017-02-08T09:29:06+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486542211619_-557991680","id":"20160507-144605_2114762501","dateCreated":"2017-02-08T09:23:31+0100","dateStarted":"2017-02-08T09:29:48+0100","dateFinished":"2017-02-08T09:29:58+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6743"},{"text":"// or get the users who most likely will like joke nr X (1..100)\nval jokeId = 1\nprintln(jokesBC.value(jokeId))\nmodel.recommendUsers(jokeId, 5)\n      .foreach { rating => println(\"User \"+rating.user +\" ( score: \"+rating.rating+\")\")}","user":"anonymous","dateUpdated":"2017-02-08T09:29:07+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"keys":[],"optionOpen":false,"height":300,"values":[],"mode":"table","groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486542211620_-559915424","id":"20160507-144605_1300294913","dateCreated":"2017-02-08T09:23:31+0100","dateStarted":"2017-02-08T09:29:57+0100","dateFinished":"2017-02-08T09:30:01+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6744"},{"text":"","user":"anonymous","dateUpdated":"2017-02-08T09:29:07+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"results":[],"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1486542211620_-559915424","id":"20160507-144605_1802118241","dateCreated":"2017-02-08T09:23:31+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6745"}],"name":"Lab6 - Recommendations","id":"2C83RECYH","angularObjects":{"2C7PJ76G4:shared_process":[],"2CAKWEBCP:shared_process":[],"2CAJAE8FS:shared_process":[],"2C9SC22ZA:shared_process":[],"2C7E3YURT:shared_process":[],"2C9QEFEVM:shared_process":[],"2CB9E937H:shared_process":[],"2C89F1UUR:shared_process":[],"2CAG461GR:shared_process":[],"2C8WQGZ95:shared_process":[],"2C91QSZPZ:shared_process":[],"2CAQS2NZ9:shared_process":[],"2CA9R2P6W:shared_process":[],"2C97ZPDRJ:shared_process":[],"2CAKDRNUP:shared_process":[],"2C8R5WJKF:shared_process":[],"2C9DB7ZX9:shared_process":[],"2CAW7T5ZV:shared_process":[],"2C9KSWREA:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}